Project Hub: NYC PM Game (Version 3.0)
Last Updated: July 22, 2025
1. Project Charter & Vision
1.1. Game Concept: A 27-space digital board game simulating the 6 major phases of an NYC construction project. Players navigate the board making decisions that impact their Time, Money, and Scope.
1.2. Player Role & Goal: The player is a project manager whose primary objective is to complete a project by navigating all 6 phases. Success is measured by efficiency in managing Time, Money, and Scope.
1.3. Core Mechanics & Rules: The game operates on dice-based movement, resource management, and a strategic card system. Key rules are based on real-world principles like sequential regulatory processes.
1.4. Win & Loss Conditions: The primary win condition is reaching the FINISH space. A leaderboard ranks players based on final metrics.
1.5. The "Vibe": A strategic puzzle under mounting pressure, evolving from optimistic and thoughtful to tense and complex.
2. Current Project State
2.1. Implemented Features
Core Architecture: A mature, modular, event-driven React application.
Data Integrity: cards.csv is fully repaired, validated, and successfully parsed.
NEW (v3.0): End-to-End Card Effect Functionality: The usePlayerCard() method is now fully implemented in GameStateManager. It safely routes card effects to the EffectsEngine, resulting in correct updates to player data (Scope, Money, Time).
NEW (v3.0): UI Synchronization for Scope: The UI now correctly re-renders to display changes to the player's Project Scope when a "Work Card" is used.
Debug Tools: window.giveCardToPlayer() and window.showGameState() functions are available for testing.
Full GameStateManager Architecture Implemented: GameStateManager is the single source of truth for all core game data, handling player movement, space effects, and providing unified UI messages.
2.2. Known Issues & Master "Punch List"
Systemic Issue (On Hold): The EffectsEngine.js is now partially integrated. The card effect routing is complete, but other parts may be dormant.
Environmental Bug (Workaround Found): The browser console enters a loop when the "Enter" key is used. The current workaround is to use the browser's "Snippets" tool for testing.
3. Project Assets
Repository: https://github.com/tomaszsb/code2026
Tech: React (CDN), JavaScript (ES6 Modules), CSS, Papa Parse.
Run locally: python3 -m http.server 8000
4. Workflow & Session Management
Session Startup Protocol: Project Owner provides the latest Project Hub document to the Project Manager, who confirms the version and critical status. The programming AI confirms its understanding of the current state.
Session Conclusion Protocol: Work completion and validation are confirmed. The programming AI updates its internal knowledge with the latest Project Hub, and confirms assimilation. The Project Manager updates the Project Hub document.
5. Gemini's Role & Directives
5.1. My Role: Project Manager, Translator, and Strategist.
5.2. My Core Directive: The Collaborative Inquiry Loop (Analyze -> Formulate Request -> Owner-as-Conduit -> Review Response -> Propose Next Step).
5.3. Guiding Principles: Never Provide Code First. Trust the Human. Default to Diagnosis.
6. Document Management Directive
At the end of every successful work session, I must provide a new, complete, and updated version of this entire Project Hub document. I must also direct the programming AI to ingest the latest Project Hub and wait for its confirmation before concluding the session.
7. Active Development Plan
Objective: Systematically refactor the 14 React components that still use an incorrect player lookup pattern (gameState.players[gameState.currentPlayer]).
Status: READY TO BEGIN.
Priority: High. This is a major piece of technical debt that poses a risk to UI stability, especially in multi-player scenarios.
Estimated Effort: 45-60 minutes.
Dependencies: None.
Success Criteria: All instances of player lookup via array index are replaced with the robust players.find(p => p.id === playerID) pattern. The application remains fully functional after the refactor.
Next Action: (To be determined in the next session) Begin auditing and refactoring the high-priority components (e.g., GameBoard.js, ActionPanel.js).
8. Version Log
v3.0 (July 22, 2025): Successfully implemented and validated end-to-end card usage via usePlayerCard. Diagnosed and fixed a critical UI-disconnect bug where Project Scope was not updating. Identified and corrected a latent player ID vs. array index bug in updatePlayerScope. Added new lessons learned about UI validation and historical code analysis.
v2.9 (July 22, 2025): Optimized Project Hub structure and refined workflow protocols.
v2.8 (July 22, 2025): Refined "Document Management Directive" to ensure AI context updates.
v2.7 (July 21, 2025): Completed implementation of 'Full GameStateManager' architecture.
See Archived Version Log for versions v1.0 - v2.6
9. Core Principles & Lessons Learned
9.1. The "Audit First" Principle is Paramount.
9.2. The Collaborative Inquiry Loop Prevents Critical Errors.
9.3. Debugging Requires Peeling the Onion, Systematically.
9.4. Documentation is Part of the "Definition of Done."
9.5. Thorough Impact Analysis is Essential.
9.6. Efficient Session Startup & Re-baselining.
9.7. Definitive Architectural Decisions Break Repetitive Loops.
9.8. Direct Code Audits are Indispensable for Architectural Shifts.
9.9. The Distinction Between Project Hub (PM Doc) and Claude's Internal Context is Crucial.
9.10. Optimizing Workflow and Documentation for Enhanced Collaboration.
9.11. NEW (v3.0): Validation Must Include the User Interface.
Lesson: A feature is not "done" when the underlying data is correct; it is "done" when the user-facing UI correctly reflects that data change. A data-layer success can still be a user-facing failure.
Evidence: We successfully implemented usePlayerCard and confirmed via showGameState() that the scope data was updated. However, your visual check revealed that the UI itself was not re-rendering, which was the most critical part of the user experience.
Actionable Takeaway: All success criteria for new features must include a specific checkpoint to "visually confirm the expected UI changes in the browser."
9.12. NEW (v3.0): Historical Analysis Prevents Repetitive Loops.
Lesson: When a bug pattern feels familiar, it is crucial to investigate the codebase history to determine if you are regressing or making final progress on a known issue class.
Evidence: Your intuition that we had fixed an ID vs. index bug before was correct. Prompting Claude to perform a historical analysis with git proved that the new bug was the last instance of this error in GameStateManager, not a regression. This confirmed our progress and uncovered 14 more instances in other files, turning a potential loop into a clear future roadmap.
Actionable Takeaway: Trust team intuition about recurring problems. Use version control history as a project management tool to analyze bug patterns and ensure forward momentum.
9.13. NEW (v3.0): Isolate Environmental Bugs with Non-Application Tests.
Lesson: When debugging behavior defies logic (like an infinite console loop from any command), the problem may lie in the development environment itself, not the application code.
Evidence: We were stalled by a console loop. Running a simple, non-game-related command (console.log('test')) also triggered the loop, proving the issue was environmental. This allowed us to stop debugging our code and find a workaround (browser snippets).
Actionable Takeaway: If a bug seems impossible, test the container it's running in. A simple, unrelated test can quickly isolate environmental issues from application issues, saving significant time.
10. Technical Opportunities
NEW: Systematically fix the 14 React components using player index instead of player ID for lookups.
Investigate the root cause of the console loop environmental bug.
Performance Optimization: Investigate further opportunities for reducing React re-renders.
Mobile UX Enhancements: Continue refining touch-friendly interactions.