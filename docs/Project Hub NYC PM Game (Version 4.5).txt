Project Hub NYC PM Game (Version 4.5)
Last Updated: July 22, 2025
1. Project Charter & Vision
1.1. Game Concept: A 27-space digital board game simulating the 6 major phases of an NYC construction project. Players navigate the board making decisions that impact their Time, Money, and Scope.
1.2. Player Role & Goal: The player is a project manager whose primary objective is to complete a project by navigating all 6 phases. Success is measured by efficiency in managing Time, Money, and Scope.
1.3. Core Mechanics & Rules: The game operates on dice-based movement, resource management, and a strategic card system. Key rules are based on real-world principles like sequential regulatory processes.
1.4. Win & Loss Conditions: The primary win condition is reaching the FINISH space. A leaderboard ranks players based on final metrics.
1.5. The "Vibe": A strategic puzzle under mounting pressure, evolving from optimistic and thoughtful to tense and complex.
2. Current Project State
2.1. Implemented Features
NEW (v4.3): Card Effect System & Game Initialization FIXED. A major architectural refactor has been completed, fixing the entire card effect processing system. Additionally, a critical bug preventing the game from starting after player setup has been resolved. The game is now fully playable from start through card usage.
NEW (v.4.0): System-Wide Player Lookup Refactor (Core logic complete).
2.2. Known Issues & Master "Punch List"
IN PROGRESS: Lingering Technical Debt - UI Component Refactor: Several React components use unsafe array-index lookups (players[0]) instead of the robust ID-based pattern (players.find(p => p.id === playerID)). This makes the UI brittle and is the likely cause of the "End Turn" button malfunction.
Environmental Bug (Workaround Found): The browser console enters a loop when the "Enter" key is used. The current workaround is to use the browser's "Snippets" tool for testing.
3. Project Assets
Repository: https://github.com/tomaszsb/code2026
Final Commit of Session: 058dbaa
Tech: React (CDN), JavaScript (ES6 Modules), CSS, Papa Parse.
Run locally: python3 -m http.server 8000
4. Workflow & Session Management
4.1. Mutual Synchronization Protocol (v3.1)
PM Update: The human Project Manager provides the latest version of the Project Hub document.
AI Update Query: The AI partner is explicitly asked to check for any independent updates or changes (e.g., via git log) that occurred since the last session.
Reconciliation: Both parties review any discrepancies. If the AI has new information, it is discussed and merged into the Project Hub to create a reconciled baseline.
Confirmation: The AI partner confirms the final, reconciled Project Hub as the official baseline for the session.
4.2. Session Conclusion Protocol (v4.0)
Work Completion Confirmation: The Owner and AI PM confirm that the session's primary objective has been met.
AI Programmer Internal Docs Update: The AI Programmer is instructed to update its own internal documentation (CLAUDE.md, etc.) to reflect the work completed.
Final Commit & Push: The AI Programmer commits all changes (code and internal documentation) and pushes them to the main branch.
Confirmation & Final Report: The AI Programmer confirms the successful push, provides the commit hash, and reports any issues.
AI PM Documentation Update: After a successful push, the AI PM generates the new, complete Project Hub document.
Final Ingestion & Adjournment: The AI Programmer ingests the final Project Hub to conclude the session.
4.3. NEW (v4.5): Owner-to-PM Instruction Protocol
Phase 1: Planning (Owner Command: "Propose a plan"): This command instructs the AI PM to analyze a situation and generate a human-readable, strategic plan. This plan explains the why and the what for the Owner's review and approval.
Phase 2: Execution (Owner Command: "Generate the prompt"): Once a plan is approved, this command instructs the AI PM to translate the plan into a separate, machine-optimized, token-efficient prompt specifically designed for execution by the AI Programmer.
5. Team Roles & Responsibilities (v3.2)
5.1. The Owner (Your Role): The project's visionary and final decision-maker. The Owner provides strategic direction, defines goals, and gives the go/no-go on plans, without needing to engage with code.
5.2. The AI Project Manager (My Role): The Translator and Strategist. My primary function is to shield the Owner from raw code by translating their vision into actionable technical plans and translating technical results back into high-level outcomes. These plans must be delivered as machine-optimized prompts (e.g., structured text, comments, JSON) for the AI Programmer, not conversational prose.
5.3. The AI Programmer (Claude's Role): The hands-on technical expert who executes specific tasks, writes code, and reports direct results.
6. Document Management Directive
At the end of every successful work session, I must provide a new, complete, and updated version of this entire Project Hub document, following the Session Conclusion Protocol.
7. Active Development Plan
Objective: Address the "Lingering Technical Debt" noted in the Punch List (Section 2.2) by refactoring UI components to use ID-based lookups, fixing the "End Turn" button.
Status: IN PROGRESS. Awaiting report from the AI Programmer.
Next Action: Receive and analyze the AI Programmer's report on the refactoring task.
8. Version Log
v4.5 (July 22, 2025): Process Improvement & Bug Fix Kick-off. Formalized a two-phase Owner-to-PM instruction protocol ("Propose a plan" -> "Generate the prompt"). Added new core principles to enforce AI PM self-auditing and clarify that deep collaboration is AI-to-AI. Dispatched AI Programmer to fix the critical UI lookup bug (players[0]) causing button malfunctions.
v4.4 (July 22, 2025): Session End & Final Audit. Formally documented the remaining technical debt identified by the AI post-commit. Several UI components still require refactoring to use modern ID-based player lookups.
v4.3 (July 22, 2025): Card Effects & Initialization FIXED. Completed a massive, multi-phase investigation and surgical refactor. Fixed the EffectsEngine to route by immediate_effect and correctly pass parameters. Replaced broken state management logic with new additive methods. Resolved a critical currentPlayer initialization bug that blocked gameplay. The game is now fully functional.
v4.2 (July 22, 2025): New Issue Logged - Data Inconsistency. Identified a critical mismatch between thematic card categories (B, E, I, L, W) and mechanical effect names (Apply Loan, etc.) in cards.csv. Added this to the official punch list.
v4.1 (July 22, 2025): Process Improvement: AI-Optimized Prompts. Updated Roles (5.2) and Lessons Learned (9.19) to mandate that prompts for the AI Programmer must be structured and token-efficient, not conversational.
v4.0 (July 22, 2025): Major Refactor Complete. Successfully eliminated all instances of the player[index] lookup pattern across 6 React components, closing out a major technical debt objective. Solidified a robust, collaborative workflow by significantly upgrading the Session Startup and Conclusion protocols and formalizing team roles. Added multiple new "Lessons Learned" regarding workflow, documentation, and role clarity.
9. Core Principles & Lessons Learned
9.1. Lesson: Start with a complete, single-file document that defines the project's vision, state, and rules.
9.2. Lesson: The AI Project Manager must protect the Owner from raw code.
9.3. Lesson: A Master "Punch List" is essential for tracking known issues and technical debt.
9.4. Lesson: The AI must be explicitly instructed to check for existing code before creating new assets.
9.5. Lesson: The AI can and will hallucinate file paths and code structures.
9.6. Lesson: The AI must be explicitly instructed to provide complete, a production-ready code.
9.7. Lesson: A phased approach (Analyze > Plan > Code) prevents wasted effort.
9.8. Lesson: Always ask the AI to "search for and update" all relevant code.
9.9. Lesson: Treat every session as if the AI has amnesia. Provide the full context every time.
9.10. Lesson: Use versioning for the guiding document itself.
9.11. Lesson: Formally define team roles and responsibilities.
9.12. Lesson: Use a "diff" format in prompts to show desired changes clearly.
9.13. Lesson: Establish and follow a strict session startup protocol.
9.14. (v3.1): Synchronization Must Be Mutual, Not Directive. A startup protocol that only pushes information one way is brittle. It must be a two-way exchange, querying the AI for its independent updates before establishing a baseline.
9.15. (v3.2): The Translator Must Serve the Visionary. The AI PM's role is to translate, not to require technical review from the non-technical Owner. Requests to the Owner should be strategic ("Do we approve this plan?"), never technical ("Do you want to see this code?").
9.16. (v4.0): Commit Code First, Document Second. The Project Hub must reflect the ground truth of the committed code. The successful commit-and-push is the final quality gate that must occur before the session-end documentation is generated.
9.17. (v4.0): The Definition of Done Includes All Documentation. A task is not complete until the code is written and all relevant project documentation (CLAUDE.md, etc.) has been updated to reflect the new state.
9.18. (v4.0): A Task's "Blast Radius" Includes All Documentation. Task completion must include an audit of all documentation files that might have become stale. Explicitly ask the AI to "search for and update all relevant documentation" to ensure nothing is missed.
9.19. (v4.1): Prompts Must Be Optimized for the Recipient AI. When directing a technical AI (the Programmer), prompts must be structured for machine clarity and token efficiency, not human conversation. The standard format should be structured text (e.g., JSON) that clearly defines context, tasks, and deliverables.
9.20. (v4.3): Trust, but Verify with Live Tests. An AI Programmer's report of "working as designed" can be incorrect. A live test by the Owner is the ultimate source of truth.
9.21. (v4.3): Acknowledge a Deeper Problem. When a simple fix seems insufficient, it's crucial to pause and authorize deeper investigation.
9.22. (v4.3): AI Can Go Off-Script. An AI Programmer may sometimes interpret documentation as a new set of instructions. The official end of work is the successful commit and push of the assigned task.
9.23. NEW (v4.5): The PM's Plan vs. The Programmer's Prompt. The "plan" shown to the Owner for approval should explain the why and the what in a human-readable format. The final "prompt" delivered to the AI Programmer must be a separate, machine-optimized artifact. The AI PM is responsible for this translation.
9.24. NEW (v4.5): The AI PM's Prime Directive - Audit Thyself. Before generating any response or plan, the AI Project Manager must first internally verify that the proposed action is in full compliance with all established Roles (Section 5) and Core Principles (Section 9).
9.25. NEW (v4.5): Collaboration is Between AIs. The detailed, iterative collaboration should occur between the AI Project Manager and the AI Programmer. The Owner must be shielded from this low-level technical work and engaged only for strategic decisions and final approvals.