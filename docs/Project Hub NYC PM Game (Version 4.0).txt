Project Hub NYC PM Game (Version 4.0)
Last Updated: July 22, 2025
1. Project Charter & Vision
1.1. Game Concept: A 27-space digital board game simulating the 6 major phases of an NYC construction project. Players navigate the board making decisions that impact their Time, Money, and Scope.
1.2. Player Role & Goal: The player is a project manager whose primary objective is to complete a project by navigating all 6 phases. Success is measured by efficiency in managing Time, Money, and Scope.
1.3. Core Mechanics & Rules: The game operates on dice-based movement, resource management, and a strategic card system. Key rules are based on real-world principles like sequential regulatory processes.
1.4. Win & Loss Conditions: The primary win condition is reaching the FINISH space. A leaderboard ranks players based on final metrics.
1.5. The "Vibe": A strategic puzzle under mounting pressure, evolving from optimistic and thoughtful to tense and complex.
2. Current Project State
2.1. Implemented Features
NEW (v4.0): System-Wide Player Lookup Refactor: All 6 key React components (GameBoard, ActionPanel, PlayerStatusPanel, GameSaveManager, ResultsPanel, SpaceExplorer) have been refactored to use the robust players.find(p => p.id === playerID) lookup pattern, eliminating a major source of technical debt and enhancing future multi-player stability.
Core Architecture: A mature, modular, event-driven React application.
Data Integrity: cards.csv is fully repaired, validated, and successfully parsed.
End-to-End Card Effect Functionality: usePlayerCard() is fully implemented, correctly routing effects to the EffectsEngine and updating player data.
UI Synchronization for Scope: The UI correctly re-renders to display changes to the player's Project Scope.
2.2. Known Issues & Master "Punch List"
Systemic Issue (On Hold): The EffectsEngine.js is now partially integrated. The card effect routing is complete, but other parts may be dormant.
Environmental Bug (Workaround Found): The browser console enters a loop when the "Enter" key is used. The current workaround is to use the browser's "Snippets" tool for testing.
3. Project Assets
Repository: https://github.com/tomaszsb/code2026
Tech: React (CDN), JavaScript (ES6 Modules), CSS, Papa Parse.
Run locally: python3 -m http.server 8000
4. Workflow & Session Management
4.1. Mutual Synchronization Protocol (v3.1)
PM Update: The human Project Manager provides the latest version of the Project Hub document.
AI Update Query: The AI partner is explicitly asked to check for any independent updates or changes (e.g., via git log) that occurred since the last session.
Reconciliation: Both parties review any discrepancies. If the AI has new information, it is discussed and merged into the Project Hub to create a reconciled baseline.
Confirmation: The AI partner confirms the final, reconciled Project Hub as the official baseline for the session.
4.2. Session Conclusion Protocol (v4.0)
Work Completion Confirmation: The Owner and AI PM confirm that the session's primary objective has been met.
AI Programmer Internal Docs Update: The AI Programmer is instructed to update its own internal documentation (CLAUDE.md, etc.) to reflect the work completed.
Final Commit & Push: The AI Programmer commits all changes (code and internal documentation) and pushes them to the main branch.
Confirmation & Final Report: The AI Programmer confirms the successful push, provides the commit hash, and reports any issues.
AI PM Documentation Update: After a successful push, the AI PM generates the new, complete Project Hub document.
Final Ingestion & Adjournment: The AI Programmer ingests the final Project Hub to conclude the session.
5. Team Roles & Responsibilities (v3.2)
5.1. The Owner (Your Role): The project's visionary and final decision-maker. The Owner provides strategic direction, defines goals, and gives the go/no-go on plans, without needing to engage with code.
5.2. The AI Project Manager (My Role): The Translator and Strategist. My primary function is to shield the Owner from raw code by translating their vision into actionable technical plans and translating technical results back into high-level outcomes.
5.3. The AI Programmer (Claude's Role): The hands-on technical expert who executes specific tasks, writes code, and reports direct results.
6. Document Management Directive
At the end of every successful work session, I must provide a new, complete, and updated version of this entire Project Hub document, following the Session Conclusion Protocol.
7. Active Development Plan
Objective: To be determined in the next session's planning phase.
Status: READY FOR NEW OBJECTIVE. The previous objective was successfully completed.
Priority: TBD.
Next Action: Begin the next work session with the Mutual Synchronization Protocol to establish our next development goal.
8. Version Log
v4.0 (July 22, 2025): Major Refactor Complete. Successfully eliminated all instances of the player[index] lookup pattern across 6 React components, closing out a major technical debt objective. Solidified a robust, collaborative workflow by significantly upgrading the Session Startup and Conclusion protocols and formalizing team roles. Added multiple new "Lessons Learned" regarding workflow, documentation, and role clarity.
See Archived Version Log for versions v1.0 - v3.2
9. Core Principles & Lessons Learned
... (principles 9.1 - 9.13) ...
9.14. NEW (v3.1): Synchronization Must Be Mutual, Not Directive.
Lesson: A startup protocol that only pushes information one way is brittle. It must be a two-way exchange, querying the AI for its independent updates before establishing a baseline.
9.15. NEW (v3.2): The Translator Must Serve the Visionary.
Lesson: The AI PM's role is to translate, not to require technical review from the non-technical Owner. Requests to the Owner should be strategic ("Do we approve this plan?"), never technical ("Do you want to see this code?").
9.16. NEW (v4.0): Commit Code First, Document Second.
Lesson: The Project Hub must reflect the ground truth of the committed code. The successful commit-and-push is the final quality gate that must occur before the session-end documentation is generated.
9.17. NEW (v4.0): The Definition of Done Includes All Documentation.
Lesson: A task is not complete until the code is written and all relevant project documentation (CLAUDE.md, etc.) has been updated to reflect the new state.
9.18. NEW (v4.0): A Task's "Blast Radius" Includes All Documentation.
Lesson: Task completion must include an audit of all documentation files that might have become stale. Explicitly ask the AI to "search for and update all relevant documentation" to ensure nothing is missed.
Final Instruction: Please have Claude ingest this Project Hub v4.0. Once it confirms assimilation, our session is successfully concluded. Thank you for a remarkably productive and process-improving session.